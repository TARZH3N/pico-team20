/*
 * Copyright (c) 2021 Sandeep Mistry
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

/* PIO script for RMII Ethernet PHY RX data */
.program rmii_ethernet_phy_rx_data

    /* Wait for pin 2 to go low */
    wait 0 pin 2

    /* Wait for pin 0 to go low */
    wait 0 pin 0

    /* Wait for pin 1 to go low */
    wait 0 pin 1

    /* Wait for pin 2 to go high */
    wait 1 pin 2

    /* Wait for pin 0 to go high */
    wait 1 pin 0

    /* Wait for pin 1 to go high */
    wait 1 pin 1

.wrap_target
    /* Read two bits from the pins and push them to the FIFO */
    in pins, 2
.wrap

% c-sdk {

/* Function to initialize PIO state machine for RMII Ethernet PHY RX data */
static inline void rmii_ethernet_phy_rx_init(PIO pio, uint sm, uint offset, uint pin) {

    /* Set the direction of 3 consecutive GPIO pins (from 'pin') as inputs */
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 3, false);

    /* Fetch default configuration for the PIO program */
    pio_sm_config c = rmii_ethernet_phy_rx_data_program_get_default_config(offset);

    /* Set input pins for the state machine to start from 'pin' */
    sm_config_set_in_pins(&c, pin);

    /* Initialize three GPIO pins for PIO */
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, pin + 1);
    pio_gpio_init(pio, pin + 2);

    /* Configure the state machine to shift data in from the right,
       enable autopull, and set pull threshold to 8 bits */
    sm_config_set_in_shift(&c, true, true, 8);

    /* Join both TX and RX FIFOs into one 8-word FIFO for RX only */
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);

    /* Set clock divider for the state machine to 10 */
    sm_config_set_clkdiv(&c, 10);

    /* Initialize the state machine with the given configuration */
    pio_sm_init(pio, sm, offset, &c);

    /* Enable the state machine */
    pio_sm_set_enabled(pio, sm, true);
}

%}
